import streamlit as st
from sqlalchemy.orm import joinedload
from models.db import SessionLocal
from models.party import Party
from models.activities import Activities
from models.location import Location
from models.auth import User
import pandas as pd

def search_party_view():
    st.title("Joinzy - ‡∏à‡∏≠‡∏¢‡∏ã‡∏µ‡πà!")
    st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à")

    # Create DB session
    db = SessionLocal()

    # Query all parties with joins
    parties = db.query(Party).all()
    activity_names = [a.name for a in db.query(Activities).order_by(Activities.name).all()]
    location_names = [a.name for a in db.query(Location).order_by(Location.name).all()]

    # Transform to displayable DataFrame
    rows = []
    for p in parties:
        rows.append({
            "Party Name": f"‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏Ç‡∏≠‡∏á {p.host_user.username}",
            "Activity Type": p.activity.name if p.activity else "-",
            "Date": p.party_time.strftime("%Y-%m-%d"),
            "Time": p.party_time.strftime("%H:%M"),
            "Location": p.location.name if p.location else "-",
            "Participant": f"{len(p.players)}/{p.player}",
            "View": f"[üîç View Details](#view-{p.party_id})"
        })

    df = pd.DataFrame(rows)

    selected_activity = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", ['All']+activity_names)
    selected_location = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", ['All']+location_names)

    search_text = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "")

    filtered_df = df.copy()
    if not df.empty:
        
        if selected_location != "All":
            filtered_df = filtered_df[filtered_df["Location"] == selected_location]

        if selected_activity != "All":
            filtered_df = filtered_df[filtered_df["Activity Type"] == selected_activity]

        if search_text:
            filtered_df = filtered_df[filtered_df["Party Name"].str.contains(search_text, case=False)]

    if st.button("‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà"):
        st.session_state.page = "create"
        st.rerun()

    if not filtered_df.empty:
        st.write(filtered_df[["Party Name", "Activity Type", "Date", "Time", "Location", "Participant", "View"]], unsafe_allow_html=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    db.close()
